{
  "pipelineSpec": {
    "components": {
      "comp-data-prep": {
        "executorLabel": "exec-data-prep",
        "inputDefinitions": {
          "parameters": {
            "training_clean_file_path": {
              "type": "STRING"
            },
            "training_file_path": {
              "type": "STRING"
            },
            "validation_clean_file_path": {
              "type": "STRING"
            },
            "validation_file_path": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-deploy": {
        "executorLabel": "exec-deploy",
        "inputDefinitions": {
          "parameters": {
            "artifact_uri": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "serving_container_uri": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-train": {
        "executorLabel": "exec-train",
        "inputDefinitions": {
          "parameters": {
            "model_dir": {
              "type": "STRING"
            },
            "training_clean_file_path": {
              "type": "STRING"
            },
            "validation_clean_file_path": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-data-prep": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "data_prep"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery' 'tensorflow' 'tensorflow_datasets' 'pandas' 'fsspec' 'gcsfs' 'pyarrow' 'fastparquet' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef data_prep(training_file_path:str,\n              validation_file_path:str,\n              training_clean_file_path:str,\n              validation_clean_file_path:str):\n    import pandas as pd\n    import numpy as np\n\n    df_train = pd.read_csv(training_file_path)\n    df_val = pd.read_csv(validation_file_path)\n\n    movies_ids = list(set(list(df_train.movieId.unique()) + list(df_val.movieId.unique())))\n    users_ids = list(set(list(df_train.userId.unique()) + list(df_val.userId.unique())))\n\n    dict_movies = dict(zip(movies_ids, range(len(movies_ids)) ))\n    dict_users = dict(zip(users_ids, range(len(users_ids)) ))\n\n    df_train[\"movieId\"] = df_train[\"movieId\"].map(dict_movies)\n    df_val[\"movieId\"] = df_val[\"movieId\"].map(dict_movies)\n\n    df_train[\"userId\"] = df_train[\"userId\"].map(dict_users)\n    df_val[\"userId\"] = df_val[\"userId\"].map(dict_users)\n\n    col = [\"userId\", \"movieId\", \"rating\"]\n    df_train[col] = df_train[col].astype(np.float32)\n    df_val[col] = df_val[col].astype(np.float32)\n\n    # save to bucket\n    df_train.to_csv(training_clean_file_path, index=False)\n    df_val.to_csv(validation_clean_file_path, index=False)\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-deploy": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "deploy"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'joblib' 'sklearn' 'google-cloud-bigquery' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef deploy(\n    project: str,\n    location: str,\n    serving_container_uri: str,\n    display_name:str,\n    artifact_uri:str, \n):\n    from google.cloud import aiplatform\n    import os\n\n    aiplatform.init(project=project)\n\n    deployed_model = aiplatform.Model.upload(\n        display_name= display_name,\n        artifact_uri = artifact_uri,\n        serving_container_image_uri= serving_container_uri\n    )\n    endpoint = deployed_model.deploy(\n        traffic_split={\"0\": 100},\n        machine_type=\"n1-standard-4\"\n    )\n\n"
            ],
            "image": "python:3.8"
          }
        },
        "exec-train": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "train"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery' 'sklearn' 'tensorflow' 'tensorflow_datasets' 'pandas' 'fsspec' 'gcsfs' 'pyarrow' 'fastparquet' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef train(training_clean_file_path: str,\n          validation_clean_file_path: str,\n          model_dir: str):    \n    # TODO: Move to train.py script\n    import pandas as pd\n    import numpy as np\n    import logging\n    from typing import Dict, Text\n    import tensorflow as tf\n    from tensorflow.keras import Model\n    from tensorflow.keras import optimizers as opt\n    from tensorflow.keras.layers import Embedding, multiply, concatenate, Flatten, Input, Dense\n\n    logging.info(\"Reading train data...\")    \n    df_train = pd.read_csv(training_clean_file_path)\n    logging.info(\"Reading valid data...\")\n    df_val = pd.read_csv(validation_clean_file_path)\n\n    num_unique_users=len(set(list(df_train.userId.unique()) + list(df_val.userId.unique())))\n    num_unique_movies=len(set(list(df_train.movieId.unique()) + list(df_val.movieId.unique())))\n\n    users_input = Input(shape=(1,), name=\"users_input\")\n    users_embedding = Embedding(num_unique_users + 1, 50, name=\"users_embeddings\")(users_input)\n    users_bias = Embedding(num_unique_users + 1, 1, name=\"users_bias\")(users_input)\n\n    movies_input = Input(shape=(1,), name=\"movies_input\")\n    movies_embedding = Embedding(num_unique_movies + 1, 50, name=\"movies_embedding\")(movies_input)\n    movies_bias = Embedding(num_unique_movies + 1, 1, name=\"movies_bias\")(movies_input)\n\n    dot_product_users_movies = multiply([users_embedding, movies_embedding])\n    input_terms = dot_product_users_movies + users_bias + movies_bias\n    input_terms = Flatten(name=\"fl_inputs\")(input_terms)\n    output = Dense(1, activation=\"relu\", name=\"output\")(input_terms)\n    model = Model(inputs=[users_input, movies_input], outputs=output)\n\n    opt_adam = opt.Adam(lr = 0.005)\n    model.compile(optimizer=opt_adam, loss= ['mse'], metrics=['mean_absolute_error'])\n\n    model.fit(x=[df_train.userId, df_train.movieId], \n              y=df_train.rating, \n              batch_size=512, \n              epochs=1, \n              verbose=1, \n              validation_data=([df_val.userId, df_val.movieId], df_val.rating))\n\n    # save model\n    tf.saved_model.save(model, model_dir)\n\n"
            ],
            "image": "python:3.9"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "movielens-kfp-pipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "data-prep": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-data-prep"
            },
            "inputs": {
              "parameters": {
                "training_clean_file_path": {
                  "componentInputParameter": "training_clean_file_path"
                },
                "training_file_path": {
                  "componentInputParameter": "training_file_path"
                },
                "validation_clean_file_path": {
                  "componentInputParameter": "validation_clean_file_path"
                },
                "validation_file_path": {
                  "componentInputParameter": "validation_file_path"
                }
              }
            },
            "taskInfo": {
              "name": "data-prep"
            }
          },
          "deploy": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-deploy"
            },
            "dependentTasks": [
              "train"
            ],
            "inputs": {
              "parameters": {
                "artifact_uri": {
                  "componentInputParameter": "model_dir"
                },
                "display_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "movie-recommender-keras"
                    }
                  }
                },
                "location": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "us-central1"
                    }
                  }
                },
                "project": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "qwiklabs-gcp-04-853e5675f5e8"
                    }
                  }
                },
                "serving_container_uri": {
                  "componentInputParameter": "serving_container_uri"
                }
              }
            },
            "taskInfo": {
              "name": "deploy"
            }
          },
          "train": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-train"
            },
            "dependentTasks": [
              "data-prep"
            ],
            "inputs": {
              "parameters": {
                "model_dir": {
                  "componentInputParameter": "model_dir"
                },
                "training_clean_file_path": {
                  "componentInputParameter": "training_clean_file_path"
                },
                "validation_clean_file_path": {
                  "componentInputParameter": "validation_clean_file_path"
                }
              }
            },
            "taskInfo": {
              "name": "train"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "accuracy_deployment_threshold": {
            "type": "DOUBLE"
          },
          "max_trial_count": {
            "type": "INT"
          },
          "model_dir": {
            "type": "STRING"
          },
          "parallel_trial_count": {
            "type": "INT"
          },
          "pipeline_root": {
            "type": "STRING"
          },
          "serving_container_uri": {
            "type": "STRING"
          },
          "training_clean_file_path": {
            "type": "STRING"
          },
          "training_container_uri": {
            "type": "STRING"
          },
          "training_file_path": {
            "type": "STRING"
          },
          "validation_clean_file_path": {
            "type": "STRING"
          },
          "validation_file_path": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.10"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://kfp-movielens-artifact-store-qwiklabs-gcp-04-853e5675f5e8/pipeline",
    "parameters": {
      "accuracy_deployment_threshold": {
        "doubleValue": 0.6
      },
      "max_trial_count": {
        "intValue": "5"
      },
      "model_dir": {
        "stringValue": "gs://kfp-movielens-artifact-store-qwiklabs-gcp-04-853e5675f5e8/model"
      },
      "parallel_trial_count": {
        "intValue": "5"
      },
      "pipeline_root": {
        "stringValue": "gs://kfp-movielens-artifact-store-qwiklabs-gcp-04-853e5675f5e8/pipeline"
      },
      "serving_container_uri": {
        "stringValue": "us-docker.pkg.dev/vertex-ai/prediction/tf2-cpu.2-3:latest"
      },
      "training_clean_file_path": {
        "stringValue": "gs://kfp-movielens-artifact-store-qwiklabs-gcp-04-853e5675f5e8/data/training_clean/dataset.csv"
      },
      "training_container_uri": {
        "stringValue": "gcr.io/qwiklabs-gcp-04-853e5675f5e8/trainer_image_movielens:latest"
      },
      "training_file_path": {
        "stringValue": "gs://kfp-movielens-artifact-store-qwiklabs-gcp-04-853e5675f5e8/data/training/dataset.csv"
      },
      "validation_clean_file_path": {
        "stringValue": "gs://kfp-movielens-artifact-store-qwiklabs-gcp-04-853e5675f5e8/data/validation_clean/dataset.csv"
      },
      "validation_file_path": {
        "stringValue": "gs://kfp-movielens-artifact-store-qwiklabs-gcp-04-853e5675f5e8/data/validation/dataset.csv"
      }
    }
  }
}